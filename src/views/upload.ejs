<html>
<head>
  <%- include('partials/head', { title: "Upload" }); %>
</head>
<body>
  <%- include('partials/header', { user: user }); %>

  <main class="upload-container">
    <form class="form-group" id="uploadForm" action="/upload" method="post" enctype="multipart/form-data">
      <div class="upload-box" id="uploadBox">
        <svg class="upload-icon" viewBox="0 0 24 24">
          <path d="M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z"/>
        </svg>
        <div class="upload-text" id="upload-text">Drag and drop your video here</div>
        <div class="upload-subtext" id="upload-subtext">or click to browse files</div>
        <input type="file" id="fileInput" name="video" hidden accept="video/*">
        <div class="progress-bar">
          <div class="progress"></div>
        </div>
      </div>

      <div class="input-group">
        <label for="title">Video Title</label>
        <input type="text" id="title" name="title" placeholder="Enter video title">
      </div>
      <div class="input-group">
        <label for="description">Description</label>
        <textarea id="description" name="description" placeholder="Tell viewers about your video"></textarea>
      </div>
      <button type="submit" class="submit-btn">Upload Video</button>
    </form>
    <div id="message"></div>
  </main>

  <script>
    const uploadBox = document.getElementById('uploadBox');
    const fileInput = document.getElementById('fileInput');
    const progressBar = document.querySelector('.progress-bar');
    const progress = document.querySelector('.progress');
    const uploadForm = document.getElementById('uploadForm');
    const messageDiv = document.getElementById('message');
    const maintext = document.getElementById('upload-text');
    const subtext = document.getElementById('upload-subtext');

    let uploadCooldown = false;

    uploadBox.addEventListener('click', () => fileInput.click());

    uploadBox.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadBox.style.borderColor = 'var(--primary)';
      uploadBox.style.background = 'rgba(255, 255, 255, 0.05)';
    });

    uploadBox.addEventListener('dragleave', (e) => {
      e.preventDefault();
      uploadBox.style.borderColor = 'rgba(99, 102, 241, 0.3)';
      uploadBox.style.background = 'rgba(255, 255, 255, 0.03)';
    });

    uploadBox.addEventListener('drop', (e) => {
      e.preventDefault();
      const files = e.dataTransfer.files;
      if (files.length && files[0].type.startsWith('video/')) {
        fileInput.files = files; // Assign dropped file to the file input
      } else {
        messageDiv.innerHTML = `<div class="alert alert-danger">Please upload a valid video file.</div>`;
      }
    });

    fileInput.addEventListener('change', () => {
      const file = fileInput.files[0];
      if (file && file.type.startsWith('video/')) {
        displayFileName(file.name);
      }
    });

    function displayFileName(fileName) {
      maintext.textContent = `Selected file: ${fileName}`;
      subtext.textContent = '';
    }

    uploadForm.addEventListener('submit', async function(event) {
      event.preventDefault();

      if (uploadCooldown) {
        messageDiv.innerHTML = `<div class="alert alert-warning">Please wait before uploading another file.</div>`;
        return;
      }
      
      messageDiv.innerHTML = "";

      const file = fileInput.files[0];
      if (!file) {
        messageDiv.innerHTML = `<div class="alert alert-danger">No file selected.</div>`;
        return;
      }
      if (!file.type.startsWith('video/')) {
        messageDiv.innerHTML = `<div class="alert alert-danger">The selected file is not a video.</div>`;
        return;
      }

      const formData = new FormData(uploadForm);

      progressBar.style.display = 'block';
      progress.style.width = '0%';

      const response = await fetch('/upload', {
        method: 'POST',
        body: formData,
        onProgress: (event) => {
          if (event.lengthComputable) {
            const progress = (event.loaded / event.total) * 100;
            updateProgressBar(progress);
          }
        }
      });

      const result = await response.json();
      if (response.ok) {
        messageDiv.innerHTML = `<div class="alert alert-success">Video Uploaded. Verification will be done within a day.</div>`;
        startCooldown();
      } else {
        messageDiv.innerHTML = `<div class="alert alert-danger">Error uploading video. Please try again.</div>`;
      }

      function updateProgressBar(percentage) {
        progress.style.width = `${percentage}%`;
      }

      maintext.value = `Drag and drop your video here`;
      subtext.value = 'or click to browse files';

      uploadForm.reset();
      setTimeout(() => {
        progressBar.style.display = 'none';
        progress.style.width = '0%';
      }, 1000);
    });

    function startCooldown() {
      uploadCooldown = true;
      setTimeout(() => {
        uploadCooldown = false;
      }, 30000); // 30 seconds cooldown
    }
  </script>
</body>
</html>